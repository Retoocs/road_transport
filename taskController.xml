<?xml version="1.0" encoding="UTF-8"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://modeler.netgrif.com/petriflow_schema.xsd">
	<id>task_controller</id>
	<initials>task_control</initials>
	<title>Ovládač úlohy</title>
	<defaultRole>true</defaultRole>
	<transitionRole>false</transitionRole>
	<caseEvents>
		<event type="create">
            <id>crt</id>
            <actions phase="post">
                <action>				
                    //only one instance per user, otherwise delete created case
					if(findCase( {it.author.email.eq(useCase.author.email).and(it.processIdentifier.eq(useCase.processIdentifier)).and(it._id.ne(useCase._id))} )) {
						async.run {
							workflowService.deleteCase(useCase._id.toString())
						}	
						throw new Exception("Instance of this process already exists for the author")
					}
					
					def title = "Ovládač úlohy"
					def name = userService.getLoggedOrSystem().name + " " + userService.getLoggedOrSystem().surname
					changeCaseProperty "title" about {
						title + " - " + name
					}
                </action>
            </actions>
        </event>
    </caseEvents>
	<!-- TRANSACTIONS -->
	<!-- ROLES -->
	<role>
		<id>system</id>
		<title>System</title>
	</role>
	<role>
		<id>director</id>
		<title>Riaditeľ</title>
	</role>
	<role>
		<id>dispatcher</id>
		<title>Dispečer</title>
	</role>
	<role>
		<id>mechanic</id>
		<title>Mechanik</title>
	</role>
	<role>
		<id>driver</id>
		<title>Vodič</title>
	</role>
	<roleRef>
        <id>system</id>
        <caseLogic>
			<create>true</create>
            <delete>true</delete>
        </caseLogic>
    </roleRef>
	<!-- DATA -->
	<data type="taskRef">
		<id>create_task_taskref</id>
		<title>Vytvorenie úlohy</title>
	</data>
	<data type="taskRef">
		<id>overview_tasks_taskref</id>
		<title>Prehľad týždňa</title>
	</data>
	<data type="button">
		<id>btn_plus_week</id>
		<title>Týždeň --></title>
		<placeholder>+1</placeholder>
	</data>
	<data type="button">
		<id>btn_minus_week</id>
		<title>&lt;-- Týždeň</title>
		<placeholder>-1</placeholder>
	</data>
	<data type="date">
		<id>from_date</id>
		<title>Od</title>
	</data>
	<data type="date">
		<id>to_date</id>
		<title>Do</title>
	</data>	
	<data type="date">
		<id>today</id>
		<title>Dnes</title>
	</data>	
	<data type="number">
		<id>week_offset</id>
		<title>Odchýlka týždňa</title>
		<init>0</init>
	</data>
	<data type="text">
		<id>week</id>
		<title></title>
	</data>
	<data type="enumeration_map">
		<id>tasks_no_shedule</id>
		<title>Nenaplánované úlohy</title>
	</data>
	<data type="text">
		<id>selected</id>
		<title>Selected unsheduled task</title>
	</data>
	<data type="button">
		<id>show_more</id>
		<title>Zobraziť info</title>
		<placeholder>--></placeholder>
	</data>
	<!-- I18NS -->
	<!-- TRANSITIONS -->
	<transition>
		<id>4</id>
		<x>620</x>
		<y>300</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Vytvorenie úlohy</label>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>create_task_taskref</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>4_assign</id>
			<actions phase="pre">
				<action>
					createTask: f.create_task_taskref;
					
					def newTask = createCase("5faffef90a975a1b77c9b54a_task")
					if(newTask != null){
						def taskTask = findTask( {it.caseId.eq(newTask.stringId).and(it.transitionId.eq("2"))} )
						if(taskTask != null){
							assignTask(taskTask)
							
							change createTask value{
								[taskTask.stringId]
							}
						}
					}
				</action>
			</actions>
		</event>
		<event type="cancel">
			<id>4_cancel</id>
			<actions phase="pre">
				<action>
					createTask: f.create_task_taskref;
					
					if((createTask.value != null).and(createTask.value != [])){
						def taskTask = findTask( {it._id.eq(createTask.value[0])} )
						if(taskTask != null){
							async.run{
								workflowService.deleteCase(taskTask.caseId);
							}
							
							change createTask value{ [] }
						}
					}					
				</action>
			</actions>
		</event>
		<event type="finish">
			<id>4_finish</id>
			<actions phase="pre">
				<action>
					createTask: f.create_task_taskref;
					
					if((createTask.value != null).and(createTask.value != [])){
						def taskTask = findTask( {it._id.eq(createTask.value[0])} )
						if(taskTask != null){
							finishTask(taskTask)
							
							change createTask value{ [] }
						}
					}	
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>9</id>
		<x>780</x>
		<y>460</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Prehľad týždňa</label>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup_1</id>
			<layout>grid</layout>
			<dataRef>
				<id>today</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>week</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>week_offset</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>3</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>btn_minus_week</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="set">
						fromDate: f.from_date,
						weekOffset: f.week_offset,
						toDate: f.to_date,
						week: f.week,
						overview: f.overview_tasks_taskref;						
						
						if( (fromDate.value != null).and(toDate.value != null) ){
							change fromDate value{
								fromDate.value.minusWeeks(1)
							}
							change toDate value{
								toDate.value.minusWeeks(1)
							}
							change weekOffset value{ weekOffset.value - 1 }
							change week value { 
								fromDate.value.format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.YYYY")) + 
								" - " + 
								toDate.value.format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.YYYY"))
							}
							
							def tmpAllTaskInstances = findCases( {it.processIdentifier.eq("5faffef90a975a1b77c9b54a_task")} )
							def idsWithinWeek = []
							def allTaskInstances = new ArrayList&lt;>(tmpAllTaskInstances)
							
							allTaskInstances.sort( {it.dataSet["shedule_date"].value} )
							
							allTaskInstances.each{ taskInstance ->
								def tmpDate = taskInstance.getFieldValue("shedule_date")
								if( (tmpDate != null).and(taskInstance != null) ){
									def sheduleDate = tmpDate.toInstant().atZone(java.time.ZoneId.systemDefault()).toLocalDate()
									
									if( sheduleDate.isAfter(fromDate.value.minusDays(1)).and(sheduleDate.isBefore(toDate.value.plusDays(1))) ){
										def task = findTask( {it.caseId.eq(taskInstance.stringId).and(it.transitionId.eq("75"))} )
										if(task != null){
											idsWithinWeek.add(task.stringId)
										}
									}
								}								
							}
							
							change overview value{
								idsWithinWeek
							}
						}
					</action>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>btn_plus_week</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="set">
						fromDate: f.from_date,
						weekOffset: f.week_offset,
						toDate: f.to_date,
						week: f.week,
						overview: f.overview_tasks_taskref;
						
						if( (fromDate.value != null).and(toDate.value != null) ){
							change fromDate value{
								fromDate.value.plusWeeks(1)
							}
							change toDate value{
								toDate.value.plusWeeks(1)
							}
							change weekOffset value{ weekOffset.value + 1 }
							change week value { 
								fromDate.value.format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.YYYY")) + 
								" - " + 
								toDate.value.format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.YYYY"))
							}
							
							def tmpAllTaskInstances = findCases( {it.processIdentifier.eq("5faffef90a975a1b77c9b54a_task")} )
							def idsWithinWeek = []
							def allTaskInstances = new ArrayList&lt;>(tmpAllTaskInstances)
							
							allTaskInstances.sort( {it.dataSet["shedule_date"].value} )
							
							allTaskInstances.each{ taskInstance ->
								def tmpDate = taskInstance.getFieldValue("shedule_date")
								if( (tmpDate != null).and(taskInstance != null) ){
									def sheduleDate = tmpDate.toInstant().atZone(java.time.ZoneId.systemDefault()).toLocalDate()
									if( sheduleDate.isAfter(fromDate.value.minusDays(1)).and(sheduleDate.isBefore(toDate.value.plusDays(1))) ){

										def task = findTask( {it.caseId.eq(taskInstance.stringId).and(it.transitionId.eq("75"))} )
										if(task != null){
											idsWithinWeek.add(task.stringId)
										}
									}
								}								
							}
							
							change overview value{
								idsWithinWeek
							}
						}
					</action>
				</logic>
				<layout>
					<x>1</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>tasks_no_shedule</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="get">
						dis: f.this;
						
						dis.name.defaultValue = "Nenaplánované úlohy (${dis.options.size()})"
					</action>
					<action trigger="set">
						selected: f.selected,
						dis: f.this;
						
						change selected value { dis.value }
					</action>
				</logic>
				<layout>
					<x>2</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>	
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>overview_tasks_taskref</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
		</dataGroup>		
		<event type="assign">
			<id>9_assign</id>
			<actions phase="pre">
				<action>
					selected: f.selected,
					fromDate: f.from_date,
					toDate: f.to_date,
					today: f.today,
					week: f.week,
					tasksNoShedule: f.tasks_no_shedule,
					overview: f.overview_tasks_taskref;
					
					change selected value { null }
					change tasksNoShedule value { null }
					
					def tmpToday = java.time.LocalDate.now()
					def mondayOfCurrentWeek = tmpToday.with(java.time.temporal.TemporalAdjusters.previousOrSame(java.time.DayOfWeek.MONDAY))
					
					change fromDate value{
						mondayOfCurrentWeek
					}					
					change toDate value{
						mondayOfCurrentWeek.plusDays(6)
					}
					change today value { tmpToday }
					change week value { 
						fromDate.value.format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.YYYY")) + 
						" - " + 
						toDate.value.format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.YYYY"))
					}
					
					if( (fromDate.value != null).and(toDate.value != null) ){
						def tmpAllTaskInstances = findCases( {it.processIdentifier.eq("5faffef90a975a1b77c9b54a_task")} )
						def allTaskInstances = new ArrayList&lt;>(tmpAllTaskInstances)
						def idsWithinWeek = []
					
						allTaskInstances.sort( {it.dataSet["shedule_date"].value} )
						
						allTaskInstances.each{ taskInstance ->
							def tmpDate = taskInstance.getFieldValue("shedule_date")
							if( (tmpDate != null).and(taskInstance != null) ){
								def sheduleDate = tmpDate.toInstant().atZone(java.time.ZoneId.systemDefault()).toLocalDate()
								
								if( sheduleDate.isAfter(fromDate.value.minusDays(1)).and(sheduleDate.isBefore(toDate.value.plusDays(1))) ){
									def task = findTask( {it.caseId.eq(taskInstance.stringId).and(it.transitionId.eq("75"))} )
									if(task != null){
										idsWithinWeek.add(task.stringId)
									}
								}
							}
							else if(taskInstance != null){
								def str = taskInstance.visualId.split("-")[1] + " - " + taskInstance.getFieldValue("title")
							
								change tasksNoShedule options {
									tasksNoShedule.options + [(taskInstance.stringId): str]
								}
							}
						}					
						
						change overview value{
							idsWithinWeek
						}
					}					
				</action>
			</actions>
		</event>
		<event type="cancel">
			<id>9_cancel</id>
			<actions phase="pre">
				<action>
					fromDate: f.from_date,
					toDate: f.to_date,
					weekOffset: f.week_offset,
					week: f.week,
					tasksNoShedule: f.tasks_no_shedule,
					overview: f.overview_tasks_taskref;
					
					change week value { null }
					change fromDate value{ null }
					change toDate value{ null }
					change weekOffset value { 0 }
					change overview value { [] }
					change tasksNoShedule options { [:] }					
				</action>
			</actions>
		</event>
		<event type="finish">
			<id>9_finish</id>
			<actions phase="pre">
				<action>
					fromDate: f.from_date,
					toDate: f.to_date,
					weekOffset: f.week_offset,
					week: f.week,
					tasksNoShedule: f.tasks_no_shedule,
					overview: f.overview_tasks_taskref;
					
					change week value { null }
					change fromDate value{ null }
					change toDate value{ null }
					change weekOffset value { 0 }
					change overview value { [] }
					change tasksNoShedule options { [:] }	
				</action>
			</actions>
		</event>
	</transition>
	
	<!-- PLACES -->
	<place>
		<id>2</id>
		<x>620</x>
		<y>460</y>
		<label>initialized</label>
		<tokens>1</tokens>
		<static>false</static>
	</place>
	<!-- ARCS -->
	<arc>
		<id>8</id>
		<type>read</type>
		<sourceId>2</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>10</id>
		<type>read</type>
		<sourceId>2</sourceId>
		<destinationId>9</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
</document>
