<?xml version="1.0" encoding="UTF-8"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://modeler.netgrif.com/petriflow_schema.xsd">
	<id>notification</id>
	<initials>notifikácia</initials>
	<title>Notifikácia</title>
	<defaultRole>true</defaultRole>
	<transitionRole>false</transitionRole>
	<!-- TRANSACTIONS -->
	<!-- ROLES -->
	<role>
		<id>system</id>
		<title>System</title>
	</role>
	<role>
		<id>director</id>
		<title>Riaditeľ</title>
	</role>
	<role>
		<id>dispatcher</id>
		<title>Dispečer</title>
	</role>
	<role>
		<id>mechanic</id>
		<title>Mechanik</title>
	</role>
	<role>
		<id>driver</id>
		<title>Vodič</title>
	</role>
	<!-- DATA -->
	<data type="enumeration_map">
		<id>car_list_notify</id>
		<title>Notifikované vozidlá</title>
		<view>
			<list/>
		</view>
	</data>
	<data type="boolean">
		<id>notify_vehicles</id>
		<title>Zapnúť notifikácie vozidiel?</title>
	</data>
	<data type="enumeration_map">
		<id>services_list_notify</id>
		<title>Notifikované servisné záznamy</title>
		<view>
			<list/>
		</view>
	</data>
	<data type="boolean">
		<id>notify_services</id>
		<title>Zapnúť notifikácie servisných záznamov?</title>
	</data>
	<data type="enumeration_map">
		<id>tasks_list_notify</id>
		<title>Notifikované úlohy</title>
		<view>
			<list/>
		</view>
	</data>
	<data type="boolean">
		<id>notify_tasks</id>
		<title>Zapnúť notifikácie úloh?</title>
	</data>
	<data type="taskRef">
		<id>all_notification_tasks</id>
		<title>All notification tasks</title>
	</data>
	<data type="text">
		<id>selected</id>
		<title>Selected notified instance</title>
	</data>
	<!-- I18NS -->
	<!-- TRANSITIONS -->
	<transition>
		<id>5</id>
		<x>970</x>
		<y>610</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>initialize</label>		
		<trigger type="auto"/>
		<event type="assign">
			<id>5_assign</id>
			<actions phase="pre">
				<action>
					//only one instance per user, otherwise delete created case
					if(findCase( {it.author.email.eq(useCase.author.email).and(it.processIdentifier.eq(useCase.processIdentifier)).and(it._id.ne(useCase._id))} )) {
						async.run {
							workflowService.deleteCase(useCase._id.toString())
						}
						throw new Exception("Instance of this process already exists for the author")		
					}
				</action>
			</actions>
		</event>
		<event type="finish">
			<id>5_finish</id>
			<actions phase="pre">
				<action>
					enableVehicles: f.notify_vehicles,
					enableServices: f.notify_services,
					enableTasks: f.notify_tasks;
					
					change enableVehicles value { true }
					change enableServices value { true }
					change enableTasks value { true }
					
					def title = "Notifikácie"
					def name = userService.getLoggedOrSystem().name + " " + userService.getLoggedOrSystem().surname
					changeCaseProperty "title" about {
						title + " - " + name
					}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>9</id>
		<x>514</x>
		<y>267</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Skontrolovanie vozidiel</label>
		<assignPolicy>auto</assignPolicy>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<layout>grid</layout>
			<id>DataGroup_0</id>
			<dataRef>
				<id>car_list_notify</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="set">
						selected: f.selected,
						services: f.services_list_notify,
						tasks: f.tasks_list_notify,
						list: f.this;
						
						change services value { null }
						change tasks value { null }
						
						change selected value { list.value }						
					</action>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>9_assign</id>
			<actions phase="pre">
				<action>
					notifiedVehicles: f.car_list_notify;
						
					change notifiedVehicles value { null } 					
					change notifiedVehicles options { [:] }
					
					def all = findCases( {it.processIdentifier.eq("5faffef90a975a1b77c9b54a_carr").and(it.dataSet.get("status").value?.eq("Aktívny"))} )					
					def nowDate = java.time.LocalDate.now()
					
					all.each{ car ->
						def visualId = car.visualId
						visualId = visualId.split("-")[1]
						
						String carTxt
						def carName = car.getFieldValue("car_name")
						if((carName != null).and(!carName?.isEmpty())){
							carTxt = visualId + " - " + car.getFieldValue("plate_number") + " - " + carName
						}
						else {
							carTxt = visualId + " - " + car.getFieldValue("plate_number")
						}
					
						// STK notification
						if(car.getFieldValue("stk_notification")){ 
							String value
							String alertStk
						
							Date tmpToConvert = car.dataSet["stk_expiration_date"].value
							if(tmpToConvert != null){
								def carStkExpirationDate = tmpToConvert.toInstant().atZone(java.time.ZoneId.systemDefault()).toLocalDate()
								
								//date is over
								if(carStkExpirationDate.isBefore(nowDate)){ 
									alertStk = " - !STK prepadla!"								
								}
								// date is over in less than 30 days
								else{ 
									def differenceInDays = java.time.temporal.ChronoUnit.DAYS.between(nowDate, carStkExpirationDate)
									if(differenceInDays &lt; 31){
										String daysTxt
										if(differenceInDays == 1){
											daysTxt = " deň"
										}
										else{
											daysTxt = " dní"
										}									
										alertStk = " - STK prepadne o " + differenceInDays + daysTxt
									}
								}
								
								if(alertStk != null){
									value = carTxt + alertStk							
									change notifiedVehicles options {
										notifiedVehicles.options + [(car.stringId): value]
									}
								}								
							}
						}


						// OIL change notification
						if(car.getFieldValue("oil_notification")){ 	
							String value
							String alertOil
							boolean tmpKmOver = false, tmpKmAlmostOver = false
							
							
							def carOilChangedAtKm = car.getFieldValue("last_oil_change_mileage")
							def carKm = car.getFieldValue("mileage")
							def carOilChangeIntervalKm = car.getFieldValue("oil_change_interval_km")
							def carNotifyInKm = car.getFieldValue("oil_notify_in_km")
							if( (carOilChangedAtKm != null).and(carKm != null).and(carOilChangeIntervalKm != null).and(carNotifyInKm != null) ){
								def diff = carKm - (carOilChangedAtKm + carOilChangeIntervalKm)

								// km over
								if(diff > 0){ 									
									alertOil = " - " + diff + " km po intervale výmeny oleja!"
									tmpKmOver = true
								}
								//km bout to pass out
								else if(Math.abs(diff) &lt; carNotifyInKm){
									alertOil = " - " + Math.abs(diff) + " km pred intervalom výmeny oleja"
									tmpKmAlmostOver = true
								} 
							}
							
							Date tmpToConvert = car.dataSet["last_oil_change_date"].value
							if(tmpToConvert != null){
								def carLastOilChangeDate = tmpToConvert.toInstant().atZone(java.time.ZoneId.systemDefault()).toLocalDate()
								def carOilChangeIntervalDate = car.getFieldValue("oil_change_interval_months")							
								if(carOilChangeIntervalDate != null){
									def diff = java.time.temporal.ChronoUnit.DAYS.between(nowDate, carLastOilChangeDate.plusMonths(carOilChangeIntervalDate as Long))
									String daysTxt
									if(Math.abs(diff) == 1){
										daysTxt = " deň"
									}
									else{
										daysTxt = " dní"
									}	

									//time over
									if( (!tmpKmOver).and(diff &lt; 0) ){										
										alertOil = " - " + Math.abs(diff) + " " + daysTxt + " po intervale výmeny oleja!"
									}
									//time about to over
									else if( (!tmpKmAlmostOver).and(diff &lt; 31) ){
										alertOil = " - o " + Math.abs(diff) + " " + daysTxt + " treba vymeniť olej"
									}
								}
								
								if(alertOil != null){
									value = carTxt + alertOil							
									change notifiedVehicles options {
										notifiedVehicles.options + [(car.stringId): value]
									}
								}
							}													
						}
					}
					
					notifiedVehicles.name.defaultValue = "Notifikované vozidlá (${notifiedVehicles.options.size()})"
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>10</id>
		<x>341</x>
		<y>268</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Zapnutie notikácií vozidiel</label>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
	</transition>
	<transition>
		<id>11</id>
		<x>680</x>
		<y>271</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Vypnutie notikácií vozidiel</label>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
	</transition>
	<transition>
		<id>12</id>
		<x>841</x>
		<y>291</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Zapnutie notikácií serv. záznamov</label>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
	</transition>
	<transition>
		<id>13</id>
		<x>975</x>
		<y>276</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Skontrolovanie serv. záznamov</label>
		<assignPolicy>auto</assignPolicy>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<layout>grid</layout>
			<id>DataGroup_0</id>
			<dataRef>
				<id>services_list_notify</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="set">
						selected: f.selected,
						cars: f.car_list_notify,
						tasks: f.tasks_list_notify,
						list: f.this;
						
						change cars value { null }	
						change tasks value { null }	
						
						change selected value { list.value }						
					</action>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>13_assign</id>
			<actions phase="pre">
				<action>
					notifiedServices: f.services_list_notify;
						
					change notifiedServices value { null } 					
					change notifiedServices options { [:] }
					
					def all = findCases( {it.processIdentifier.eq("5faffef90a975a1b77c9b54a_service").and(it.dataSet.get("status").value?.ne("Úkon dokončený"))} )					
					def nowDate = java.time.LocalDate.now()
					
					all.each{ service ->					
						if(service.getFieldValue("start_date") != null){
							def visualId = service.visualId
							visualId = visualId.split("-")[1]
							
							def carPlateNumber = service.getFieldValue("car_plate_number")
							def carName = service.getFieldValue("car_name")
							def task = service.getFieldValue("task")
							task = task.substring(0, Math.min(task.length(), 40));

							def serviceTxt
							if( (carName != null).and(!carName.isEmpty()) ){
								serviceTxt = visualId + " - " + carPlateNumber + " - " + carName + " - " + task
							}
							else{
								serviceTxt = visualId + " - " + carPlateNumber + " - " + task
							}
							
							//check for deadline
							if(service.getFieldValue("deadline_notification")){
								def value
								def alertDeadline
								
								def tmpDeadline = service.getFieldValue("deadline")
								if(tmpDeadline != null){
									def deadline = tmpDeadline.toInstant().atZone(java.time.ZoneId.systemDefault()).toLocalDate()
									def diff = java.time.temporal.ChronoUnit.DAYS.between(nowDate, deadline)
									
									String daysTxt
									if(Math.abs(diff) == 1){
										daysTxt = " deň"
									}
									else{
										daysTxt = " dní"
									}
									
									if(diff &lt; 0){
										alertDeadline = " - " + Math.abs(diff) + " " + daysTxt + " po termíne uzavretia!"
									}
									else if(diff &lt; 4){
										alertDeadline = " - " + diff + " " + daysTxt + " pred termínom uzavretia"
									}	

									if(alertDeadline != null){
										value = serviceTxt + alertDeadline							
										change notifiedServices options {
											notifiedServices.options + [(service.stringId): value]
										}
									}
								}
							}
						}						
					}
					
					notifiedServices.name.defaultValue = "Notifikované servisné záznamy (${notifiedServices.options.size()})"
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>14</id>
		<x>1115</x>
		<y>298</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Vypnutie notikácií serv. záznamov</label>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
	</transition>
	<transition>
		<id>15</id>
		<x>1318</x>
		<y>296</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Zapnutie notikácií úloh</label>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
	</transition>
	<transition>
		<id>16</id>
		<x>1480</x>
		<y>295</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Skontrolovanie úloh</label>
		<assignPolicy>auto</assignPolicy>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<layout>grid</layout>
			<id>DataGroup_0</id>
			<dataRef>
				<id>tasks_list_notify</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="set">
						selected: f.selected,
						cars: f.car_list_notify,
						services: f.services_list_notify,
						list: f.this;
						
						change cars value { null }
						change services value { null }
						
						change selected value { list.value }						
					</action>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>16_assign</id>
			<actions phase="pre">
				<action>
					notifiedTasks: f.tasks_list_notify;
						
					change notifiedTasks value { null } 					
					change notifiedTasks options { [:] }
					
					def all = findCases( {it.processIdentifier.eq("5faffef90a975a1b77c9b54a_task").and(it.dataSet.get("status").value?.ne("Uzavretá"))} )					
					def nowDate = java.time.LocalDate.now()
					
					all.each{ task ->
						if(task.getFieldValue("creation_date") != null){
							def visualId = task.visualId
							visualId = visualId.split("-")[1]
							
							def taskTitle = task.getFieldValue("title")
							taskTitle = taskTitle.substring(0, Math.min(taskTitle.length(), 40));						
							def taskTxt = visualId + " - " + taskTitle		
							
							//check for shedule date
							if(task.getFieldValue("shedule_date_notification")){
								def value
								def alertSheduleDate
								
								def tmpSheduleDate = task.getFieldValue("shedule_date")
								if(tmpSheduleDate != null){
									def sheduleDate = tmpSheduleDate.toInstant().atZone(java.time.ZoneId.systemDefault()).toLocalDate()
									def diff = java.time.temporal.ChronoUnit.DAYS.between(nowDate, sheduleDate)
									
									String daysTxt
									if(Math.abs(diff) == 1){
										daysTxt = " deň"
									}
									else{
										daysTxt = " dní"
									}
									
									if(diff &lt; 0){
										alertSheduleDate = " - " + Math.abs(diff) + " " + daysTxt + " po termíne uzavretia!"
									}
									else if(diff &lt; 4){
										alertSheduleDate = " - " + diff + " " + daysTxt + " do termínu uzavretia"
									}	

									if(alertSheduleDate != null){
										value = taskTxt + alertSheduleDate							
										change notifiedTasks options {
											notifiedTasks.options + [(task.stringId): value]
										}
									}
								}
							}
						}						
					}
					
					notifiedTasks.name.defaultValue = "Notifikované úlohy (${notifiedTasks.options.size()})"
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>17</id>
		<x>1632</x>
		<y>296</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Vypnutie notikácií úloh</label>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
	</transition>
	<transition>
		<id>19</id>
		<x>1503</x>
		<y>607</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Nastavenie notifikácií</label>
		<assignPolicy>auto</assignPolicy>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<layout>grid</layout>
			<id>DataGroup_0</id>
			<dataRef>
				<id>notify_services</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="set">
						enableServices: f.this;
						
						async.run {
						  assignTask(enableServices.value ? "12" : "14")
						  finishTask(enableServices.value ? "12" : "14")
						}
					</action>
					<action trigger="get">
						enableServices: f.this;
						
						def turningOff = findTask( {it.caseId.eq(useCase.stringId).and(it.transitionId.eq("14"))} )
						
						// if true, means service notifications are off
						if(turningOff == null){
							change enableServices value { false }
						}else{
							change enableServices value { true }
						}
					</action>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance></appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>notify_vehicles</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="set">
						enableVehicles: f.this;
						
						async.run {
						  assignTask(enableVehicles.value ? "10" : "11")
						  finishTask(enableVehicles.value ? "10" : "11")
						}
					</action>
					<action trigger="get">
						enableVehicles: f.this;
						
						def turningOff = findTask( {it.caseId.eq(useCase.stringId).and(it.transitionId.eq("11"))} )
						
						// if true, means vehicle notifications are off
						if(turningOff == null){
							change enableVehicles value { false }
						}else{
							change enableVehicles value { true }
						}
					</action>
				</logic>
				<layout>
					<x>1</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance></appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>notify_tasks</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="set">
						enableTasks: f.this;
						
						async.run {
						  assignTask(enableTasks.value ? "15" : "17")
						  finishTask(enableTasks.value ? "15" : "17")
						}
					</action>
					<action trigger="get">
						enableTasks: f.this;
						
						def turningOff = findTask( {it.caseId.eq(useCase.stringId).and(it.transitionId.eq("17"))} )
						
						// if true, means vehicle notifications are off
						if(turningOff == null){
							change enableTasks value { false }
						}else{
							change enableTasks value { true }
						}
					</action>
				</logic>
				<layout>
					<x>2</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance></appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>41</id>
		<x>1504</x>
		<y>740</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Kontrolný panel</label>
		<assignPolicy>auto</assignPolicy>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>all_notification_tasks</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>41_assign</id>
			<actions phase="pre">
				<action>
					allNotifications: f.all_notification_tasks;
					
					def notificationTasks = findTasks({ it.caseId.eq(useCase.stringId).and(
						it.transitionId.eq("9") // vehicle check
						.or(it.transitionId.eq("13")) // service check
						.or(it.transitionId.eq("16")) //task check
					)})
					
					def notificationTasksIds = notificationTasks.collect { it.stringId }
					
					async.run{
						assignTasks(notificationTasks)
					}					
					
					change allNotifications value { notificationTasksIds }
				</action>
			</actions>
		</event>
		<event type="cancel">
			<id>41_cancel</id>
			<actions phase="pre">
				<action>					
					def notificationTasks = findTasks({ it.caseId.eq(useCase.stringId).and(
						it.transitionId.eq("9") // vehicle check
						.or(it.transitionId.eq("13")) // service check
						.or(it.transitionId.eq("16")) //task check
					)})
					
					async.run{
						cancelTasks(notificationTasks)
					}						
				</action>
			</actions>
		</event>
	</transition>
	<!-- PLACES -->
	<place>
		<id>1</id>
		<x>518</x>
		<y>397</y>
		<label>Notifikácie vozidiel povolené</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>2</id>
		<x>973</x>
		<y>413</y>
		<label>Notifikácie servisných záznamov povolené</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>3</id>
		<x>1494</x>
		<y>474</y>
		<label>Notifikácie úloh povolené</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>4</id>
		<x>519</x>
		<y>612</y>
		<label>uninitialized</label>
		<tokens>1</tokens>
		<static>false</static>
	</place>
	<place>
		<id>6</id>
		<x>510</x>
		<y>153</y>
		<label>Notifikácie vozidiel zakázané</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>7</id>
		<x>971</x>
		<y>137</y>
		<label>Notifikácie servisných záznamov zakázané</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>8</id>
		<x>1486</x>
		<y>186</y>
		<label>Notifikácie úloh zakázané</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>18</id>
		<x>1274</x>
		<y>612</y>
		<label>initialized</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<!-- ARCS -->
	<arc>
		<id>20</id>
		<type>regular</type>
		<sourceId>4</sourceId>
		<destinationId>5</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>21</id>
		<type>regular</type>
		<sourceId>5</sourceId>
		<destinationId>18</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>22</id>
		<type>regular</type>
		<sourceId>5</sourceId>
		<destinationId>1</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>23</id>
		<type>regular</type>
		<sourceId>5</sourceId>
		<destinationId>2</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>24</id>
		<type>regular</type>
		<sourceId>5</sourceId>
		<destinationId>3</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>25</id>
		<type>read</type>
		<sourceId>1</sourceId>
		<destinationId>9</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>26</id>
		<type>read</type>
		<sourceId>2</sourceId>
		<destinationId>13</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>27</id>
		<type>read</type>
		<sourceId>3</sourceId>
		<destinationId>16</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>28</id>
		<type>regular</type>
		<sourceId>3</sourceId>
		<destinationId>17</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>29</id>
		<type>regular</type>
		<sourceId>17</sourceId>
		<destinationId>8</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>30</id>
		<type>regular</type>
		<sourceId>8</sourceId>
		<destinationId>15</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>31</id>
		<type>regular</type>
		<sourceId>15</sourceId>
		<destinationId>3</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>32</id>
		<type>regular</type>
		<sourceId>2</sourceId>
		<destinationId>14</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>33</id>
		<type>regular</type>
		<sourceId>14</sourceId>
		<destinationId>7</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>34</id>
		<type>regular</type>
		<sourceId>7</sourceId>
		<destinationId>12</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>35</id>
		<type>regular</type>
		<sourceId>12</sourceId>
		<destinationId>2</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>36</id>
		<type>regular</type>
		<sourceId>1</sourceId>
		<destinationId>11</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>37</id>
		<type>regular</type>
		<sourceId>11</sourceId>
		<destinationId>6</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>38</id>
		<type>regular</type>
		<sourceId>6</sourceId>
		<destinationId>10</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>39</id>
		<type>regular</type>
		<sourceId>10</sourceId>
		<destinationId>1</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>40</id>
		<type>read</type>
		<sourceId>18</sourceId>
		<destinationId>19</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>42</id>
		<type>read</type>
		<sourceId>18</sourceId>
		<destinationId>41</destinationId>
		<multiplicity>1</multiplicity>
	</arc>	
</document>
