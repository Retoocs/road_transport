<?xml version="1.0" encoding="UTF-8"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://modeler.netgrif.com/petriflow_schema.xsd">
	<id>task</id>
	<initials>úloha</initials>
	<title>Uloha</title>
	<defaultRole>true</defaultRole>
	<transitionRole>false</transitionRole>
	<caseEvents>
        <event type="delete">
            <id>pdf</id>
            <actions phase="pre">
                <action>
                    serviceTaskRef: f.service_creation;
					
					if( (serviceTaskRef.value != []).and(serviceTaskRef.value != null) ){
						def toCancel = findTask({it._id.eq(serviceTaskRef.value[0])});		
							
						if(toCancel != null){
							cancelTask(toCancel);
						}				
					}
                </action>
            </actions>
        </event>
    </caseEvents>
	<!-- TRANSACTIONS -->
	<!-- ROLES -->
	<role>
		<id>system</id>
		<title>System</title>
	</role>
	<role>
		<id>director</id>
		<title>Riaditeľ</title>
	</role>
	<role>
		<id>dispatcher</id>
		<title>Dispečer</title>
	</role>
	<role>
		<id>mechanic</id>
		<title>Mechanik</title>
	</role>
	<role>
		<id>driver</id>
		<title>Vodič</title>
	</role>
	<roleRef>
        <id>system</id>
        <caseLogic>
			<create>true</create>
            <delete>true</delete>
        </caseLogic>
    </roleRef>
	<roleRef>
        <id>director</id>
        <caseLogic>
            <delete>true</delete>
        </caseLogic>
    </roleRef>
	<roleRef>
        <id>dispatcher</id>
        <caseLogic>
            <delete>true</delete>
        </caseLogic>
    </roleRef>
	<!-- DATA -->
	<data type="text">
		<id>creator</id>
		<title>Zadávateľ</title>
	</data>
	<data type="user">
		<id>assignee</id>
		<title>Riešiteľ</title>
		<action trigger="set">
			user: f.this,
			status: f.status;
			
			if(user.value == null){
				change status value{
					"Nepridelená"
				}
			}
			else {
				change status value{
					"Pridelená -> " + user.value.surname
				}
			}
		</action>
	</data>
	<data type="text">
		<id>task</id>
		<title>Úloha</title>
		<values>area</values>
	</data>
	<data type="text">
		<id>closed_by</id>
		<title>Uzavrel</title>
	</data>
	<data type="text">
		<id>desc</id>
		<title>Popis stavu</title>
		<values>area</values>
	</data>
	<data type="enumeration">
		<id>closure_state</id>
		<title>Stav uzavretia</title>
		<values>Vyriešená</values>
		<values>Nevyriešená</values>
		<values>Rieši sa v servisnom zázname</values>
	</data>
	<data type="date">
		<id>creation_date</id>
		<title>Dátum vytvorenia</title>
	</data>
	<data type="date">
		<id>close_date</id>
		<title>Dátum uzavretia</title>
	</data>
	<data type="date">
		<id>change_date</id>
		<title>Dátum poslednej zmeny</title>
	</data>
	<data type="date">
		<id>shedule_date</id>
		<title>Dátum naplánovania</title>
	</data>
	<data type="text">
		<id>title</id>
		<title>Nadpis</title>
		<values>area</values>
	</data>
	<data type="text">
		<id>status</id>
		<title>Stav</title>
		<action trigger="set">
			status: f.this,
			desc: f.desc,
			history: f.status_history;
			
			def currentDateTime = java.time.LocalDateTime.now()
			def formatter = java.time.format.DateTimeFormatter.ofPattern("dd.MM.YYYY HH:mm")
			def formatedDateTime = currentDateTime.format(formatter)
			def surname = userService.getLoggedOrSystem().surname
			
			def txt = formatedDateTime + " -- " + status.value + " (${surname})"
			if(desc.value != null){
				if(!desc.value.isEmpty()){
					txt = txt + " - " + desc.value
				}				
			}		
						
			change history choices {
				history.choices + [txt]
			}			
			
			def title = useCase.title
			def torn = title.split("\\{", 0)
			
			changeCaseProperty "title" about {
				torn[0] + " {${status.value}}"
			}
		</action>
	</data>
	<data type="text">
		<id>accept_removal</id>
		<title>Vymazanie treba potvrdiť</title>
	</data>
	<data type="enumeration">
		<id>status_history</id>
		<title>História stavov</title>
	</data>
	<data type="taskRef">
		<id>service_creation</id>
		<title>Vytvorenie servisného záznamu</title>
	</data>
	<data type="enumeration_map">
		<id>car_list</id>
		<title>Zoznam áut</title>
	</data>
	<data type="enumeration_map">
		<id>car_list_nofilter</id>
		<title>Car list NO FILTER</title>
	</data>
	<data type="text">
		<id>last_car_select</id>
		<title>ID posledne vybraného auta</title>
	</data>
	<data type="boolean">
		<id>delete_service</id>
		<title>Vymazať aj servisný záznam?</title>
	</data>
	<data type="enumeration">
		<id>car_owner_category</id>
		<title>Typ majiteľa [filter]</title>
	</data>
	<data type="enumeration_map">
		<id>car_list_owner_cat</id>
		<title>Car list with owner category filter</title>
	</data>
	<data type="enumeration_map">
		<id>car_list_name</id>
		<title>Car list with name filter</title>
	</data>
	<data type="text">
		<id>car_name_filter</id>
		<title>Názov auta [filter]</title>
	</data>
	<data type="enumeration_map">
		<id>car_list_plate_number</id>
		<title>Car list with plate number filter</title>
	</data>
	<data type="text">
		<id>plate_number_filter</id>
		<title>EČV [filter]</title>
	</data>
	<data type="enumeration_map">
		<id>car_list_visual_id</id>
		<title>Car list with name filter</title>
	</data>
	<data type="text">
		<id>visual_id_filter</id>
		<title>ID [filter]</title>
	</data>
	<data type="boolean">
		<id>event_from_outside</id>
		<title>Had the event happened outside? </title>
		<init>false</init>
	</data>
	<data type="boolean">
		<id>shedule_date_notification</id>
		<title>Notifikovať termín požadovaného uzavretia?</title>
		<init>true</init>
	</data>
	<data type="boolean">
		<id>show_more_info</id>
		<title>Rozšírené</title>
	</data>
	<data type="text">
		<id>visual_id</id>
		<title>ID</title>
	</data>
	<data type="text">
		<id>service_visualId</id>
		<title>Číslo servisného záznamu</title>
	</data>
	<data type="enumeration" immediate="true">
		<id>priority</id> 
		<title>Priorita</title>
		<values>0 - Nízka</values>
		<values>1 - Stredná</values>
		<values>2 - Vysoká</values>
		<init>0 - Nízka</init>
	</data>
	<!-- I18NS -->
	<!-- TRANSITIONS -->
	<transition>
		<id>2</id>
		<x>540</x>
		<y>300</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Vytvorenie úlohy</label>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<layout>grid</layout>
			<id>DataGroup_0</id>
			<dataRef>
				<id>title</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>task</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>0</y>
					<rows>1</rows>
					<cols>3</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>priority</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>shedule_date</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>assignee</id>
				<logic>
					<behavior>editable</behavior>
				</logic>					
				<layout>
					<x>2</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>2_assign</id>
			<actions phase="pre">
				<action>
					creator: f.creator;					
					change creator value { loggedUser().name + " " +  loggedUser().surname}			
				</action>
			</actions>
		</event>
		<event type="cancel">
			<id>2_cancel</id>
			<actions phase="pre">
				<action>
					async.run{
						workflowService.deleteCase(useCase.stringId)
					}		
				</action>
			</actions>
		</event>
		<event type="finish">
			<id>2_finish</id>
			<actions phase="pre">
				<action>
					title: f.title;
					
					changeCaseProperty "title" about {
						title.value + " {}"
					}
				</action>
			</actions>
			<actions phase="post">
				<action>
					status: f.status,
					user: f.assignee,
					id: f.visual_id,
					creationDate: f.creation_date;

					
					if(user.value == null){
						change status value{
							"Nepridelená"
						}
					}
					else{
						change status value{
							"Pridelená -> " + user.value.surname
						}
					}
					
					change id value {
						useCase.visualId.split("-")[1]
					}

					change creationDate value {
						java.time.LocalDate.now()
					}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>show</id>
		<x>460</x>
		<y>100</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Zobrazenie informácií</label>
		<assignPolicy>auto</assignPolicy>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>director</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>dispatcher</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>mechanic</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>driver</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<layout>grid</layout>
			<id>DataGroup_1</id>
			<dataRef>
				<id>title</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>task</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>0</y>
					<rows>1</rows>
					<cols>3</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>priority</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>shedule_date</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>assignee</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>show_more_info</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="get">
						thisTask: t.show,
						btn: f.this,
						id: f.visual_id,
						creationDate: f.creation_date,
						creator: f.creator,
						status: f.status,
						statusHistory: f.status_history,
						changeDate: f.change_date,
						closureState: f.closure_state,
						closeDate: f.close_date,
						closedBy: f.closed_by,
						serviceId: f.service_visualId;

						make id, hidden on thisTask when { !btn.value }	
						make creationDate, hidden on thisTask when { !btn.value }
						make creator, hidden on thisTask when { !btn.value }	
						make status, hidden on thisTask when { !btn.value }
						make statusHistory, hidden on thisTask when { !btn.value }
						make changeDate, hidden on thisTask when { !btn.value }
						make closureState, hidden on thisTask when { !btn.value }
						make closeDate, hidden on thisTask when { !btn.value }
						make closedBy, hidden on thisTask when { !btn.value }
						make serviceId, hidden on thisTask when { !btn.value }
					</action>
					<action trigger="set">
						thisTask: t.show,
						btn: f.this,
						id: f.visual_id,
						creationDate: f.creation_date,
						creator: f.creator,
						status: f.status,
						statusHistory: f.status_history,
						changeDate: f.change_date,
						closureState: f.closure_state,
						closeDate: f.close_date,
						closedBy: f.closed_by,
						serviceId: f.service_visualId;
						
						make id, visible on thisTask when { btn.value }
						make id, hidden on thisTask when { !btn.value }	
						
						make creationDate, visible on thisTask when { btn.value }
						make creationDate, hidden on thisTask when { !btn.value }
						
						make creator, visible on thisTask when { btn.value }
						make creator, hidden on thisTask when { !btn.value }	

						make status, visible on thisTask when { btn.value }
						make status, hidden on thisTask when { !btn.value }
						
						make statusHistory, editable on thisTask when { btn.value }
						make statusHistory, hidden on thisTask when { !btn.value }
						
						make changeDate, visible on thisTask when { btn.value }
						make changeDate, hidden on thisTask when { !btn.value }
						
						make closureState, visible on thisTask when { (btn.value).and(closureState.value != null) }
						make closureState, hidden on thisTask when { !btn.value }
						
						make closeDate, visible on thisTask when { (btn.value).and(closeDate.value != null) }
						make closeDate, hidden on thisTask when { !btn.value }
						
						make closedBy, visible on thisTask when { (btn.value).and(closedBy.value != null) }
						make closedBy, hidden on thisTask when { !btn.value }
						
						make serviceId, visible on thisTask when { (btn.value).and(serviceId.value != null) }
						make serviceId, hidden on thisTask when { !btn.value }
					</action>
				</logic>
				<layout>
					<x>3</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<layout>grid</layout>
			<id>DataGroup_0</id>
			<dataRef>
				<id>visual_id</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>status</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>status_history</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>creation_date</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>creator</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>change_date</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>close_date</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>2</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>closed_by</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>2</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>closure_state</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>2</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>service_visualId</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
				<layout>
					<x>3</x>
					<y>2</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>			
		</dataGroup>
	</transition>
	<transition>
		<id>9</id>
		<x>700</x>
		<y>180</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Upravenie informácií</label>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>director</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>dispatcher</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<layout>grid</layout>
			<id>DataGroup_0</id>
			<dataRef>
				<id>title</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>task</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>0</y>
					<rows>1</rows>
					<cols>3</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>priority</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>shedule_date</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>assignee</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>9_finish</id>
			<actions phase="post">
				<action>				
					changeDate: f.change_date;
					
					change changeDate value {
						java.time.LocalDate.now()
					}									
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>10</id>
		<x>620</x>
		<y>100</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Vymazanie úlohy</label>
		<assignPolicy>auto</assignPolicy>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>director</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>dispatcher</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<layout>grid</layout>
			<id>DataGroup_0</id>
			<dataRef>
				<id>accept_removal</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>delete_service</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="get">
						dis: f.this;
						
						change dis value {
							false
						}
					</action>
				</logic>
				<layout>
					<x>1</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>10_assign</id>
			<actions phase="pre">
				<action>				
					deleteService: f.delete_service,
					thisTask: t.10;
					
					def serviceCase = findCase( {it.processIdentifier.eq("5faffef90a975a1b77c9b54a_service").and(it.dataSet.get("parent_task_id").value?.eq(useCase.stringId))} ) 
					
					if(serviceCase == null){
						make deleteService, visible on thisTask when { true }
					} else {
						make deleteService, editable on thisTask when { true }
					}									
				</action>
			</actions>
		</event>
		<event type="finish">
			<id>10_finish</id>
			<title>Potvrdiť vymazanie</title>
			<actions phase="post">.
				<action>		
					serviceTaskRef: f.service_creation,
					deleteService: f.delete_service;
					
					if( (serviceTaskRef.value != []).and(serviceTaskRef.value != null) ){
						def toCancel = findTask({it._id.eq(serviceTaskRef.value[0])});		
							
						if(toCancel != null){
							cancelTask(toCancel);
						}				
					}
					
					if(deleteService.value){
						def toRemoveService = findCase( {it.processIdentifier.eq("5faffef90a975a1b77c9b54a_service").and(it.dataSet.get("parent_task_id").value?.eq(useCase.stringId))} )
						
						if(toRemoveService != null){
							def removeTrans = findTask( {it.caseId.eq(toRemoveService.stringId).and(it.transitionId.eq("12"))} )
							if(removeTrans != null){
								assignTask(removeTrans)
								finishTask(removeTrans)
							}
						}						
					}
				
					def toRemove = findCase( { it._id.eq(useCase._id) } );
			
					if(toRemove != null){
						async.run{
							workflowService.deleteCase(toRemove._id.toString());
						}
					}									
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>17</id>
		<x>860</x>
		<y>220</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Uzavretie úlohy</label>
		<assignPolicy>auto</assignPolicy>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>director</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>dispatcher</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>mechanic</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<layout>grid</layout>
			<id>DataGroup_0</id>
			<dataRef>
				<id>title</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>task</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>0</y>
					<rows>1</rows>
					<cols>3</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>closure_state</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>desc</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>1</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>			
		</dataGroup>
		<event type="cancel">
			<id>17_cancel</id>
			<actions phase="pre">
				<action>
					closureState: f.closure_state,
					closureDesc: f.desc,
					lastId: f.last_car_select;
					
					change closureState value {
						null
					}	
					change closureDesc value {
						null
					}					
				</action>
			</actions>
		</event>
		<event type="finish">
			<id>17_finish</id>
			<title>Uzavrieť</title>
			<actions phase="post">
				<action>
					status: f.status,
					closedBy: f.closed_by,
					closeDate: f.close_date;
					
					change closeDate value {
						java.time.LocalDate.now()
					}

					change status value{
						"Uzavretá"
					}
					
					change closedBy value{
						loggedUser().name + " " + loggedUser().surname
					}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>18</id>
		<x>860</x>
		<y>300</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Znovuotvorenie úlohy</label>
		<assignPolicy>auto</assignPolicy>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>director</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>dispatcher</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>mechanic</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<event type="finish">
			<id>18_finish</id>
			<title>Znovuotvoriť</title>
			<actions phase="pre">
				<action>
					closureState: f.closure_state,	
					closeDate: f.close_date,
					closureDesc: f.desc,
					closedBy: f.closed_by,
					serviceId: f.service_visualId;
					
					change closureState value {	null }	
					change closeDate value { null }
					change closureDesc value { null }		
					change closedBy value {	null }	
					change serviceId value { null }
				</action>
			</actions>
			<actions phase="post">
				<action>
					status: f.status;	

					change status value{
						"Znovuotvorená"
					}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>24</id>
		<x>700</x>
		<y>500</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Vytvorenie servisného záznamu</label>
		<assignPolicy>auto</assignPolicy>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>director</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>mechanic</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<layout>grid</layout>
			<id>DataGroup_2</id>
			<dataRef>
				<id>car_list</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
					<action trigger="set">		
						carList: f.this,
						lastId: f.last_car_select,
						description: f.task,
						sheduleDate: f.shedule_date,
						taskRef: f.service_creation;
						
						if(lastId.value != null){
							def refedTask = findTask( {it._id.eq(lastId.value)} )
							if(refedTask != null){
								setData(refedTask, [
									"event_from_outside": [
										"value": true,
										"type" : "boolean"
									],
								])
								cancelTask(refedTask)	
							}	
						}
						
						def refedTask = findTask( {it.caseId.eq(carList.value).and(it.transitionId.eq("20"))} )												
						
						if(refedTask != null){
							change taskRef value {
								[refedTask.stringId]
							}							
							assignTask(refedTask)	
							change lastId value{
								refedTask.stringId
							}				
							
							def carTaskData = getData(refedTask)
							if(carTaskData != null){
								def serviceTaskId = carTaskData.get("servis_creation").value[0]
								if(serviceTaskId != null){
									def serviceTask = findTask( {it._id.eq(serviceTaskId)} )										
									if(serviceTask != null){
										setData(serviceTask, [
											"task": [
												"value": description.value,
												"type" : "text"
											],
											"parent_task_id": [
												"value": useCase.stringId,
												"type" : "text"
											],
											"deadline": [
												"value": sheduleDate.value.toString(),
												"type" : "date"
											],
										])
									}
								}																	
							}
						}
					</action>
					<action trigger="get">		
						carListNoFilter: f.car_list_nofilter,
						carList: f.this,
						carListName: f.car_list_name,
						carListPlateNumber: f.car_list_plate_number,
						carListOwnerCat: f.car_list_owner_cat;	

						def carInstances = findCases( {it.processIdentifier.eq("5faffef90a975a1b77c9b54a_carr").and(it.dataSet.get("status").value.eq("Aktívny"))} ) //todo change carr to car 5faffef90a975a1b77c9b54a
						def carInstancesMap = carInstances.collectEntries {
							String value;
							
							def visualId = it.visualId
							visualId = visualId.split("-")[1]
							
							if((it.getFieldValue("car_name") != null).and(!it.getFieldValue("car_name")?.isEmpty())){
								value = visualId + " - " + it.getFieldValue("plate_number") + " - " + it.getFieldValue("car_name") + " - " + it.getFieldValue("brand") + " " + it.getFieldValue("model")
							}
							else {
								value = visualId + " - " + it.getFieldValue("plate_number") + " - " + it.getFieldValue("brand") + " " + it.getFieldValue("model")
							}
							
							[(it.stringId): value]
						}
						
						change carListNoFilter options{
							carInstancesMap
						}						
						
						//update carList
						change carList options{
							carInstancesMap
						}						
					</action>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>title</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>task</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<layout>grid</layout>
			<id>DataGroup_1</id>
			<dataRef>
				<id>car_owner_category</id>
				<logic>
					<behavior>visible</behavior>
					<action trigger="get">		
						ownerCat: f.this,
						carListOwnerCat: f.car_list_owner_cat,
						carListNoFilter: f.car_list_nofilter,
						thisTask: t.24;
						
						if(carListNoFilter.options == [:]){
							make ownerCat, visible on thisTask when { true }
						} else {
							make ownerCat, editable on thisTask when { true }
							
							def carListIterator = carListNoFilter.options.entrySet().iterator()
							def carId = carListIterator.next().getKey()
							def car = findCase( {it._id.eq(carId)} )
							
							if(car != null){
								def field = car.getField("owner_category")
								
								if(field != null){
									change ownerCat choices {
										["/Nepoužiť/"] + field.choices
									}
								}								
							}

							change carListOwnerCat options {
								carListNoFilter.options
							}
						}					
					</action>
					<action trigger="set">		
						ownerCat: f.this,
						carListNoFilter: f.car_list_nofilter,
						carListOwnerCat: f.car_list_owner_cat,
						carList: f.car_list,
						carListName: f.car_list_name,
						carListVisualId: f.car_list_visual_id,
						carListPlateNumber: f.car_list_plate_number;
						
						change carListOwnerCat options{
							[:]
						}
						
						if(ownerCat.value == ownerCat.choices[0]){
							change carListOwnerCat options{
								carListNoFilter.options
							}
						}
						else {
							carListNoFilter.options.each{ key, value ->
								def carId = key
								def car = findCase( {it._id.eq(carId)} )
								
								if(car != null){
									def ownerCatToCheck = car.getFieldValue("owner_category")
									if((ownerCatToCheck != null).and(ownerCatToCheck == ownerCat.value)){
										change carListOwnerCat options{
											carListOwnerCat.options + [(key): value]
										}
									}								
								}						
							}
						}							
						
						//update carList
						if(carListNoFilter.options != [:]){
							change carList options{
								[:]
							}
									
							carListNoFilter.options.each{ key, value ->
								if(true
									.and(carListOwnerCat.options.containsKey(key))
									.and(carListName.options.containsKey(key))
									.and(carListPlateNumber.options.containsKey(key))
									.and(carListVisualId.options.containsKey(key))
								){
									change carList options{
										carList.options + [(key): value]
									}
								}
							}
						}	
					</action>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>car_name_filter</id>
				<logic>
					<behavior>visible</behavior>
					<action trigger="get">
						carName: f.this,
						carListNoFilter: f.car_list_nofilter,
						carListName: f.car_list_name,
						thisTask: t.24;
						
						if(carListNoFilter.options == [:]){
							make carName, visible on thisTask when { true }
						} else {
							make carName, editable on thisTask when { true }
							
							change carListName options {
								carListNoFilter.options
							}
						}
					</action>
					<action trigger="set">		
						carName: f.this,
						carListNoFilter: f.car_list_nofilter,
						carListName: f.car_list_name,
						carList: f.car_list,
						carListPlateNumber: f.car_list_plate_number,
						carListVisualId: f.car_list_visual_id,
						carListOwnerCat: f.car_list_owner_cat;
						
						if(carName.value == null || carName.value.isEmpty()){
							change carListName options{
								carListNoFilter.options
							}
						}
						else {
							change carListName options{
								[:]
							}
							
							carListNoFilter.options.each{ key, value ->
								def carId = key
								def car = findCase( {it._id.eq(carId)} )
								
								if(car != null){
									def carNameToCheck = car.getFieldValue("car_name")
									
									if(carNameToCheck != null){
										carNameToCheck = java.text.Normalizer.normalize(carNameToCheck, java.text.Normalizer.Form.NFD)
										carNameToCheck = carNameToCheck.replaceAll("[\\p{InCombiningDiacriticalMarks}]", "")
										carNameToCheck = carNameToCheck.toLowerCase()

										def carNameFilter = carName.value.toLowerCase()
										
										if((carNameToCheck != null).and(carNameToCheck.contains(carNameFilter))){
											change carListName options{
												carListName.options + [(key): value]
											}
										}
									}																
								}						
							}														
						}
						
						
						//update carList
						if(carListNoFilter.options != [:]){
							change carList options{
								[:]
							}
									
							carListNoFilter.options.each{ key, value ->
								if(true
									.and(carListOwnerCat.options.containsKey(key))
									.and(carListName.options.containsKey(key))
									.and(carListPlateNumber.options.containsKey(key))
									.and(carListVisualId.options.containsKey(key))
								){
									change carList options{
										carList.options + [(key): value]
									}
								}
							}
						}											
					</action>
				</logic>
				<layout>
					<x>1</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>plate_number_filter</id>
				<logic>
					<behavior>visible</behavior>
					<action trigger="get">
						plateNumber: f.this,
						carListNoFilter: f.car_list_nofilter,
						carListPlateNumber: f.car_list_plate_number,
						thisTask: t.24;
						
						if(carListNoFilter.options == [:]){
							make plateNumber, visible on thisTask when { true }
						} else {
							make plateNumber, editable on thisTask when { true }
							
							change carListPlateNumber options {
								carListNoFilter.options
							}
						}
					</action>
					<action trigger="set">
						plateNumber: f.this,
						carListPlateNumber: f.car_list_plate_number,
						carListNoFilter: f.car_list_nofilter,		
						carList: f.car_list,
						carListName: f.car_list_name,
						carListVisualId: f.car_list_visual_id,
						carListOwnerCat: f.car_list_owner_cat;						
						
						if(plateNumber.value == null || plateNumber.value.isEmpty()){
							change carListPlateNumber options{
								carListNoFilter.options
							}
						}
						else{
							change carListPlateNumber options{
								[:]
							}
							
							carListNoFilter.options.each{ key, value ->
								def carId = key
								def car = findCase( {it._id.eq(carId)} )
								
								if(car != null){
									def plateNumberToCheck = car.getFieldValue("plate_number")
									
									if(plateNumberToCheck != null){
										plateNumberToCheck = plateNumberToCheck.toLowerCase()

										def plateNumberFilter = plateNumber.value.toLowerCase()
										
										if((plateNumberToCheck != null).and(plateNumberToCheck.contains(plateNumberFilter))){
											change carListPlateNumber options{
												carListPlateNumber.options + [(key): value]
											}
										}
									}																
								}						
							}	
						}
						
						//update carList
						if(carListNoFilter.options != [:]){
							change carList options{
								[:]
							}
									
							carListNoFilter.options.each{ key, value ->
								if(true
									.and(carListOwnerCat.options.containsKey(key))
									.and(carListName.options.containsKey(key))
									.and(carListPlateNumber.options.containsKey(key))
									.and(carListVisualId.options.containsKey(key))
								){
									change carList options{
										carList.options + [(key): value]
									}
								}
							}
						}
					</action>
				</logic>
				<layout>
					<x>2</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>visual_id_filter</id>
				<logic>
					<behavior>visible</behavior>
					<action trigger="get">
						id: f.this,
						carListNoFilter: f.car_list_nofilter,
						carListVisualId: f.car_list_visual_id,
						thisTask: t.24;
						
						if(carListNoFilter.options == [:]){
							make id, visible on thisTask when { true }
						} else {
							make id, editable on thisTask when { true }
							
							change carListVisualId options {
								carListNoFilter.options
							}
						}
					</action>
					<action trigger="set">		
						id: f.this,
						carListNoFilter: f.car_list_nofilter,
						carListVisualId: f.car_list_visual_id,
						carList: f.car_list,
						carListName: f.car_list_name,
						carListPlateNumber: f.car_list_plate_number,
						carListOwnerCat: f.car_list_owner_cat;
						
						if(id.value == null || id.value.isEmpty()){
							change carListVisualId options{
								carListNoFilter.options
							}
						}
						else {
							change carListVisualId options{
								[:]
							}
							
							carListNoFilter.options.each{ key, value ->
								def carId = key
								def car = findCase( {it._id.eq(carId)} )
								
								if(car != null){
									def carVisualIdToCheck = car.visualId
									
									if(carVisualIdToCheck != null){
										carVisualIdToCheck = carVisualIdToCheck.toLowerCase()

										def carVisualIdFilter = id.value.toLowerCase()
										
										if((carVisualIdToCheck != null).and(carVisualIdToCheck.contains(carVisualIdFilter))){
											change carListVisualId options{
												carListVisualId.options + [(key): value]
											}
										}
									}																
								}						
							}														
						}
						
						
						//update carList
						if(carListNoFilter.options != [:]){
							change carList options{
								[:]
							}
									
							carListNoFilter.options.each{ key, value ->
								if(true
									.and(carListOwnerCat.options.containsKey(key))
									.and(carListName.options.containsKey(key))
									.and(carListPlateNumber.options.containsKey(key))
									.and(carListVisualId.options.containsKey(key))
								){
									change carList options{
										carList.options + [(key): value]
									}
								}
							}
						}											
					</action>
				</logic>
				<layout>
					<x>3</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>service_creation</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>event_from_outside</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>24_assign</id>
			<actions phase="pre">
				<action>
					outsideEvent: f.event_from_outside,
					carList: f.car_list;
					
					change outsideEvent value { false }
					change carList value { null }		
				</action>
			</actions>
		</event>
		<event type="cancel">
			<id>24_cancel</id>
			<actions phase="post">
				<action>
					taskRef: f.service_creation,
					carList: f.car_list,
					outsideEvent: f.event_from_outside,
					lastId: f.last_car_select;
					
					if(!outsideEvent.value){
						if( (taskRef.value != []).and(taskRef.value != null) ){
							def toCancel = findTask({it._id.eq(taskRef.value[0])});		
							
							if(toCancel != null){
								change lastId value {
									null
								}						
								change carList value {
									[:]
								}
								
								setData(toCancel, [
									"event_from_outside": [
										"value": true,
										"type" : "boolean"
									],
								])
								cancelTask(toCancel)
								
								change taskRef value {
									[]
								}
							}	
						}	
					}				
				</action>
			</actions>
		</event>
		<event type="finish">
			<id>24_finish</id>
			<actions phase="pre">
				<action>
					closeDate: f.close_date,
					status: f.status,
					closureState: f.closure_state,
					taskRef: f.service_creation,
					carList: f.car_list,
					lastId: f.last_car_select,
					closedBy: f.closed_by,
					serviceVisualId: f.service_visualId;
					
					if((taskRef.value != null).and(taskRef.value != [])){
						def toFinish = findTask( {it._id.eq(taskRef.value[0])} );	
						
						if(toFinish != null){
							def car = findCase( {it._id.eq(toFinish.caseId)} )
							if(car != null){
								serviceId = car.getFieldValue("servis_creation")[0]
								if(serviceId != null){
									def serviceTask = findTask( {it._id.eq(serviceId)} )
									if(serviceTask != null){
										def service = findCase( {it._id.eq(serviceTask.caseId)} )
										if(service != null){
											def visualId = service.visualId.split("-")[1]
											change serviceVisualId value{ visualId }
										}
									}
								}
							}				

							finishTask(toFinish)
							
							change lastId value {
								null
							}						
							change carList value {
								[:]
							}								
							
							change closureState value{
								closureState.choices[2]
							}
						
							change taskRef value {
								[]
							}
							
							change closeDate value {
								java.time.LocalDate.now()
							}
							
							change status value{
								"Uzavretá"
							}	

							change closedBy value{
								loggedUser().name + " " + loggedUser().surname
							}
						}
					}						
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>34</id>
		<x>580</x>
		<y>420</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Nastavenie notifikácií</label>
		<assignPolicy>auto</assignPolicy>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>director</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>dispatcher</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>shedule_date_notification</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>75</id>
		<x>380</x>
		<y>180</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>short_overview</label>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
				<delegate>true</delegate>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup_0</id>
			<layout>grid</layout>
			<dataRef>
				<id>shedule_date</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>title</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>task</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>
	<!-- PLACES -->
	<place>
		<id>1</id>
		<x>380</x>
		<y>300</y>
		<label>uninitialized</label>
		<tokens>1</tokens>
		<static>false</static>
	</place>
	<place>
		<id>3</id>
		<x>540</x>
		<y>180</y>
		<label>Úloha existuje</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>4</id>
		<x>700</x>
		<y>300</y>
		<label>Úloha je aktívna</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>11</id>
		<x>740</x>
		<y>100</y>
		<label>Vymazaná</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>16</id>
		<x>1060</x>
		<y>300</y>
		<label>Úloha je uzavretá</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>26</id>
		<x>860</x>
		<y>420</y>
		<label>Úloha je otvorená v serv. zázname</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<!-- ARCS -->
	<arc>
		<id>5</id>
		<type>regular</type>
		<sourceId>1</sourceId>
		<destinationId>2</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>6</id>
		<type>regular</type>
		<sourceId>2</sourceId>
		<destinationId>3</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>7</id>
		<type>regular</type>
		<sourceId>2</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>12</id>
		<type>regular</type>
		<sourceId>3</sourceId>
		<destinationId>10</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>13</id>
		<type>regular</type>
		<sourceId>10</sourceId>
		<destinationId>11</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>15</id>
		<type>read</type>
		<sourceId>3</sourceId>
		<destinationId>show</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>19</id>
		<type>regular</type>
		<sourceId>4</sourceId>
		<destinationId>17</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>20</id>
		<type>regular</type>
		<sourceId>17</sourceId>
		<destinationId>16</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>25</id>
		<type>regular</type>
		<sourceId>4</sourceId>
		<destinationId>24</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>28</id>
		<type>inhibitor</type>
		<sourceId>26</sourceId>
		<destinationId>18</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>30</id>
		<type>regular</type>
		<sourceId>16</sourceId>
		<destinationId>18</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>31</id>
		<type>regular</type>
		<sourceId>18</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>32</id>
		<type>regular</type>
		<sourceId>24</sourceId>
		<destinationId>26</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>33</id>
		<type>regular</type>
		<sourceId>24</sourceId>
		<destinationId>16</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>1060</x><y>500</y></breakPoint>
	</arc>
	<arc>
		<id>35</id>
		<type>read</type>
		<sourceId>4</sourceId>
		<destinationId>34</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>76</id>
		<type>read</type>
		<sourceId>3</sourceId>
		<destinationId>75</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>77</id>
		<type>regular</type>
		<sourceId>9</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>78</id>
		<type>regular</type>
		<sourceId>4</sourceId>
		<destinationId>9</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
</document>
